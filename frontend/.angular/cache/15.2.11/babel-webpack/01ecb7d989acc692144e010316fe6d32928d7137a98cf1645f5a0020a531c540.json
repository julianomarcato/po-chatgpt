{"ast":null,"code":"import { of } from 'rxjs';\nimport { tap, catchError } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class AuthService {\n  constructor(http) {\n    this.http = http;\n    this.api = '/api';\n    this.user = null;\n  }\n  checkAuth() {\n    return this.http.get(`${this.api}/user`, {\n      withCredentials: true\n    }).pipe(tap(res => {\n      if (res?.authenticated) this.user = res.user;\n    }), catchError(err => {\n      this.user = null;\n      return of(null);\n    }));\n  }\n  isAuthenticated() {\n    return !!this.user;\n  }\n  setUser(u) {\n    this.user = u;\n  }\n  static {\n    this.ɵfac = function AuthService_Factory(t) {\n      return new (t || AuthService)(i0.ɵɵinject(i1.HttpClient));\n    };\n  }\n  static {\n    this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: AuthService,\n      factory: AuthService.ɵfac,\n      providedIn: 'root'\n    });\n  }\n}","map":{"version":3,"mappings":"AAEA,SAAqBA,EAAE,QAAQ,MAAM;AACrC,SAASC,GAAG,EAAEC,UAAU,QAAQ,gBAAgB;;;AAGhD,OAAM,MAAOC,WAAW;EAItBC,YAAoBC,IAAgB;IAAhB,SAAI,GAAJA,IAAI;IAHhB,QAAG,GAAG,MAAM;IACb,SAAI,GAAQ,IAAI;EAEgB;EAEvCC,SAAS;IACP,OAAO,IAAI,CAACD,IAAI,CAACE,GAAG,CAAC,GAAG,IAAI,CAACC,GAAG,OAAO,EAAE;MAAEC,eAAe,EAAE;IAAI,CAAE,CAAC,CAACC,IAAI,CACtET,GAAG,CAAEU,GAAQ,IAAI;MAAG,IAAIA,GAAG,EAAEC,aAAa,EAAE,IAAI,CAACC,IAAI,GAAGF,GAAG,CAACE,IAAI;IAAE,CAAC,CAAC,EACpEX,UAAU,CAACY,GAAG,IAAG;MAAG,IAAI,CAACD,IAAI,GAAG,IAAI;MAAE,OAAOb,EAAE,CAAC,IAAI,CAAC;IAAE,CAAC,CAAC,CAC1D;EACH;EAEAe,eAAe;IACb,OAAO,CAAC,CAAC,IAAI,CAACF,IAAI;EACpB;EAEAG,OAAO,CAACC,CAAM;IAAI,IAAI,CAACJ,IAAI,GAAGI,CAAC;EAAE;;;uBAjBtBd,WAAW;IAAA;EAAA;;;aAAXA,WAAW;MAAAe,SAAXf,WAAW;MAAAgB,YADE;IAAM;EAAA","names":["of","tap","catchError","AuthService","constructor","http","checkAuth","get","api","withCredentials","pipe","res","authenticated","user","err","isAuthenticated","setUser","u","factory","providedIn"],"sourceRoot":"","sources":["/Users/marcato/Local_Juliano/PO/po-chatgpt/frontend/src/app/auth.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { Observable, of } from 'rxjs';\nimport { tap, catchError } from 'rxjs/operators';\n\n@Injectable({ providedIn: 'root' })\nexport class AuthService {\n  private api = '/api';\n  public user: any = null;\n\n  constructor(private http: HttpClient) {}\n\n  checkAuth(): Observable<any> {\n    return this.http.get(`${this.api}/user`, { withCredentials: true }).pipe(\n      tap((res: any) => { if (res?.authenticated) this.user = res.user; }),\n      catchError(err => { this.user = null; return of(null); })\n    );\n  }\n\n  isAuthenticated(): boolean {\n    return !!this.user;\n  }\n\n  setUser(u: any) { this.user = u; }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}