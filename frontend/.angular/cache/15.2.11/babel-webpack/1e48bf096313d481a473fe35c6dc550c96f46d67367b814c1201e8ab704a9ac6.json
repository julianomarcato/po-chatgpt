{"ast":null,"code":"import { BehaviorSubject } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"@angular/router\";\nexport class AuthService {\n  constructor(http, router) {\n    this.http = http;\n    this.router = router;\n    this.apiUrl = 'http://localhost:3000';\n    this.userSubject = new BehaviorSubject(null);\n    this.user$ = this.userSubject.asObservable();\n    this.checkAuthentication();\n  }\n  // Verifica se usuário está autenticado\n  checkAuthentication() {\n    this.http.get(`${this.apiUrl}/api/user`).subscribe({\n      next: user => {\n        this.userSubject.next(user);\n      },\n      error: () => {\n        this.userSubject.next(null);\n      }\n    });\n  }\n  isAuthenticated() {\n    return this.userSubject.value !== null;\n  }\n  loginWithGoogle() {\n    window.location.href = `${this.apiUrl}/auth/google`;\n  }\n  logout() {\n    this.http.get(`${this.apiUrl}/logout`).subscribe(() => {\n      this.userSubject.next(null);\n      this.router.navigate(['/login']);\n    });\n  }\n  getUser() {\n    return this.user$;\n  }\n  static {\n    this.ɵfac = function AuthService_Factory(t) {\n      return new (t || AuthService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.Router));\n    };\n  }\n  static {\n    this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: AuthService,\n      factory: AuthService.ɵfac,\n      providedIn: 'root'\n    });\n  }\n}","map":{"version":3,"mappings":"AAIA,SAASA,eAAe,QAAoB,MAAM;;;;AAKlD,OAAM,MAAOC,WAAW;EAKtBC,YAAoBC,IAAgB,EAAUC,MAAc;IAAxC,SAAI,GAAJD,IAAI;IAAsB,WAAM,GAANC,MAAM;IAJ5C,WAAM,GAAG,uBAAuB;IAChC,gBAAW,GAAG,IAAIJ,eAAe,CAAM,IAAI,CAAC;IAC7C,UAAK,GAAG,IAAI,CAACK,WAAW,CAACC,YAAY,EAAE;IAG5C,IAAI,CAACC,mBAAmB,EAAE;EAC5B;EAEA;EACAA,mBAAmB;IACjB,IAAI,CAACJ,IAAI,CAACK,GAAG,CAAC,GAAG,IAAI,CAACC,MAAM,WAAW,CAAC,CAACC,SAAS,CAAC;MACjDC,IAAI,EAAGC,IAAS,IAAI;QAClB,IAAI,CAACP,WAAW,CAACM,IAAI,CAACC,IAAI,CAAC;MAC7B,CAAC;MACDC,KAAK,EAAE,MAAK;QACV,IAAI,CAACR,WAAW,CAACM,IAAI,CAAC,IAAI,CAAC;MAC7B;KACD,CAAC;EACJ;EAEAG,eAAe;IACb,OAAO,IAAI,CAACT,WAAW,CAACU,KAAK,KAAK,IAAI;EACxC;EAEAC,eAAe;IACbC,MAAM,CAACC,QAAQ,CAACC,IAAI,GAAG,GAAG,IAAI,CAACV,MAAM,cAAc;EACrD;EAEAW,MAAM;IACJ,IAAI,CAACjB,IAAI,CAACK,GAAG,CAAC,GAAG,IAAI,CAACC,MAAM,SAAS,CAAC,CAACC,SAAS,CAAC,MAAK;MACpD,IAAI,CAACL,WAAW,CAACM,IAAI,CAAC,IAAI,CAAC;MAC3B,IAAI,CAACP,MAAM,CAACiB,QAAQ,CAAC,CAAC,QAAQ,CAAC,CAAC;IAClC,CAAC,CAAC;EACJ;EAEAC,OAAO;IACL,OAAO,IAAI,CAACC,KAAK;EACnB;;;uBAtCWtB,WAAW;IAAA;EAAA;;;aAAXA,WAAW;MAAAuB,SAAXvB,WAAW;MAAAwB,YAFV;IAAM;EAAA","names":["BehaviorSubject","AuthService","constructor","http","router","userSubject","asObservable","checkAuthentication","get","apiUrl","subscribe","next","user","error","isAuthenticated","value","loginWithGoogle","window","location","href","logout","navigate","getUser","user$","factory","providedIn"],"sourceRoot":"","sources":["/Users/marcato/Local_Juliano/PO/po-chatgpt/frontend/src/app/auth.service.ts"],"sourcesContent":["// src/app/auth.service.ts\nimport { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { Router } from '@angular/router';\nimport { BehaviorSubject, Observable } from 'rxjs';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AuthService {\n  private apiUrl = 'http://localhost:3000';\n  private userSubject = new BehaviorSubject<any>(null);\n  public user$ = this.userSubject.asObservable();\n\n  constructor(private http: HttpClient, private router: Router) {\n    this.checkAuthentication();\n  }\n\n  // Verifica se usuário está autenticado\n  checkAuthentication() {\n    this.http.get(`${this.apiUrl}/api/user`).subscribe({\n      next: (user: any) => {\n        this.userSubject.next(user);\n      },\n      error: () => {\n        this.userSubject.next(null);\n      }\n    });\n  }\n\n  isAuthenticated(): boolean {\n    return this.userSubject.value !== null;\n  }\n\n  loginWithGoogle() {\n    window.location.href = `${this.apiUrl}/auth/google`;\n  }\n\n  logout() {\n    this.http.get(`${this.apiUrl}/logout`).subscribe(() => {\n      this.userSubject.next(null);\n      this.router.navigate(['/login']);\n    });\n  }\n\n  getUser(): Observable<any> {\n    return this.user$;\n  }\n}"]},"metadata":{},"sourceType":"module","externalDependencies":[]}