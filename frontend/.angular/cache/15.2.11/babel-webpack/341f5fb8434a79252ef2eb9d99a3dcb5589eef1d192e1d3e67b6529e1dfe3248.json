{"ast":null,"code":"import { BehaviorSubject } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"@angular/router\";\nexport class AuthService {\n  constructor(http, router) {\n    this.http = http;\n    this.router = router;\n    this.apiUrl = 'http://localhost:3000';\n    this.userSubject = new BehaviorSubject(null);\n    this.user$ = this.userSubject.asObservable();\n    this.checkAuthentication();\n  }\n  getHttpOptions() {\n    return {\n      withCredentials: true // Isso envia cookies\n    };\n  }\n\n  checkAuthentication() {\n    this.http.get(`${this.apiUrl}/api/user`, this.getHttpOptions()).subscribe({\n      next: user => this.userSubject.next(user),\n      error: () => this.userSubject.next(null)\n    });\n  }\n  isAuthenticated() {\n    return this.userSubject.value !== null;\n  }\n  loginWithGoogle() {\n    window.location.href = `${this.apiUrl}/auth/google`;\n  }\n  logout() {\n    this.http.get(`${this.apiUrl}/logout`, this.getHttpOptions()).subscribe(() => {\n      this.userSubject.next(null);\n      this.router.navigate(['/login']);\n    });\n  }\n  static {\n    this.ɵfac = function AuthService_Factory(t) {\n      return new (t || AuthService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.Router));\n    };\n  }\n  static {\n    this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: AuthService,\n      factory: AuthService.ɵfac,\n      providedIn: 'root'\n    });\n  }\n}","map":{"version":3,"mappings":"AAIA,SAASA,eAAe,QAAoB,MAAM;;;;AAKlD,OAAM,MAAOC,WAAW;EAKtBC,YAAoBC,IAAgB,EAAUC,MAAc;IAAxC,SAAI,GAAJD,IAAI;IAAsB,WAAM,GAANC,MAAM;IAJ5C,WAAM,GAAG,uBAAuB;IAChC,gBAAW,GAAG,IAAIJ,eAAe,CAAM,IAAI,CAAC;IAC7C,UAAK,GAAG,IAAI,CAACK,WAAW,CAACC,YAAY,EAAE;IAG5C,IAAI,CAACC,mBAAmB,EAAE;EAC5B;EAEQC,cAAc;IACpB,OAAO;MACLC,eAAe,EAAE,IAAI,CAAC;KACvB;EACH;;EAEAF,mBAAmB;IACjB,IAAI,CAACJ,IAAI,CAACO,GAAG,CAAC,GAAG,IAAI,CAACC,MAAM,WAAW,EAAE,IAAI,CAACH,cAAc,EAAE,CAAC,CAACI,SAAS,CAAC;MACxEC,IAAI,EAAGC,IAAS,IAAK,IAAI,CAACT,WAAW,CAACQ,IAAI,CAACC,IAAI,CAAC;MAChDC,KAAK,EAAE,MAAM,IAAI,CAACV,WAAW,CAACQ,IAAI,CAAC,IAAI;KACxC,CAAC;EACJ;EAEAG,eAAe;IACb,OAAO,IAAI,CAACX,WAAW,CAACY,KAAK,KAAK,IAAI;EACxC;EAEAC,eAAe;IACbC,MAAM,CAACC,QAAQ,CAACC,IAAI,GAAG,GAAG,IAAI,CAACV,MAAM,cAAc;EACrD;EAEAW,MAAM;IACJ,IAAI,CAACnB,IAAI,CAACO,GAAG,CAAC,GAAG,IAAI,CAACC,MAAM,SAAS,EAAE,IAAI,CAACH,cAAc,EAAE,CAAC,CAACI,SAAS,CAAC,MAAK;MAC3E,IAAI,CAACP,WAAW,CAACQ,IAAI,CAAC,IAAI,CAAC;MAC3B,IAAI,CAACT,MAAM,CAACmB,QAAQ,CAAC,CAAC,QAAQ,CAAC,CAAC;IAClC,CAAC,CAAC;EACJ;;;uBAnCWtB,WAAW;IAAA;EAAA;;;aAAXA,WAAW;MAAAuB,SAAXvB,WAAW;MAAAwB,YAFV;IAAM;EAAA","names":["BehaviorSubject","AuthService","constructor","http","router","userSubject","asObservable","checkAuthentication","getHttpOptions","withCredentials","get","apiUrl","subscribe","next","user","error","isAuthenticated","value","loginWithGoogle","window","location","href","logout","navigate","factory","providedIn"],"sourceRoot":"","sources":["/Users/marcato/Local_Juliano/PO/po-chatgpt/frontend/src/app/auth.service.ts"],"sourcesContent":["// auth.service.ts - Atualize as requisições HTTP\nimport { Injectable } from '@angular/core';\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { Router } from '@angular/router';\nimport { BehaviorSubject, Observable } from 'rxjs';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AuthService {\n  private apiUrl = 'http://localhost:3000';\n  private userSubject = new BehaviorSubject<any>(null);\n  public user$ = this.userSubject.asObservable();\n\n  constructor(private http: HttpClient, private router: Router) {\n    this.checkAuthentication();\n  }\n\n  private getHttpOptions() {\n    return {\n      withCredentials: true // Isso envia cookies\n    };\n  }\n\n  checkAuthentication() {\n    this.http.get(`${this.apiUrl}/api/user`, this.getHttpOptions()).subscribe({\n      next: (user: any) => this.userSubject.next(user),\n      error: () => this.userSubject.next(null)\n    });\n  }\n\n  isAuthenticated(): boolean {\n    return this.userSubject.value !== null;\n  }\n\n  loginWithGoogle() {\n    window.location.href = `${this.apiUrl}/auth/google`;\n  }\n\n  logout() {\n    this.http.get(`${this.apiUrl}/logout`, this.getHttpOptions()).subscribe(() => {\n      this.userSubject.next(null);\n      this.router.navigate(['/login']);\n    });\n  }\n}"]},"metadata":{},"sourceType":"module","externalDependencies":[]}