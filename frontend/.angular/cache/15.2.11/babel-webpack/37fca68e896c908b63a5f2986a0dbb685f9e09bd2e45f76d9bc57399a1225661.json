{"ast":null,"code":"import { of } from 'rxjs';\nimport { map, catchError } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class AuthService {\n  constructor(http) {\n    this.http = http;\n    this.authenticated = false;\n  }\n  login() {\n    window.location.href = '/auth/google';\n  }\n  logout() {\n    return this.http.get('/logout', {\n      withCredentials: true\n    });\n  }\n  getUser() {\n    return this.http.get('/api/user', {\n      withCredentials: true\n    }).pipe(map(res => {\n      this.authenticated = res.authenticated;\n      return res;\n    }), catchError(() => {\n      this.authenticated = false;\n      return of({\n        authenticated: false\n      });\n    }));\n  }\n  isAuthenticated() {\n    return this.authenticated;\n  }\n  static {\n    this.ɵfac = function AuthService_Factory(t) {\n      return new (t || AuthService)(i0.ɵɵinject(i1.HttpClient));\n    };\n  }\n  static {\n    this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: AuthService,\n      factory: AuthService.ɵfac,\n      providedIn: 'root'\n    });\n  }\n}","map":{"version":3,"mappings":"AAEA,SAAqBA,EAAE,QAAQ,MAAM;AACrC,SAASC,GAAG,EAAEC,UAAU,QAAQ,gBAAgB;;;AAKhD,OAAM,MAAOC,WAAW;EAItBC,YAAoBC,IAAgB;IAAhB,SAAI,GAAJA,IAAI;IAFhB,kBAAa,GAAG,KAAK;EAEU;EAEvCC,KAAK;IACHC,MAAM,CAACC,QAAQ,CAACC,IAAI,GAAG,cAAc;EACvC;EAEAC,MAAM;IACJ,OAAO,IAAI,CAACL,IAAI,CAACM,GAAG,CAAC,SAAS,EAAE;MAAEC,eAAe,EAAE;IAAI,CAAE,CAAC;EAC5D;EAEAC,OAAO;IACL,OAAO,IAAI,CAACR,IAAI,CAACM,GAAG,CAAyC,WAAW,EAAE;MAAEC,eAAe,EAAE;IAAI,CAAE,CAAC,CAACE,IAAI,CACvGb,GAAG,CAACc,GAAG,IAAG;MACR,IAAI,CAACC,aAAa,GAAGD,GAAG,CAACC,aAAa;MACtC,OAAOD,GAAG;IACZ,CAAC,CAAC,EACFb,UAAU,CAAC,MAAK;MACd,IAAI,CAACc,aAAa,GAAG,KAAK;MAC1B,OAAOhB,EAAE,CAAC;QAAEgB,aAAa,EAAE;MAAK,CAAE,CAAC;IACrC,CAAC,CAAC,CACH;EACH;EAEAC,eAAe;IACb,OAAO,IAAI,CAACD,aAAa;EAC3B;;;uBA7BWb,WAAW;IAAA;EAAA;;;aAAXA,WAAW;MAAAe,SAAXf,WAAW;MAAAgB,YAFV;IAAM;EAAA","names":["of","map","catchError","AuthService","constructor","http","login","window","location","href","logout","get","withCredentials","getUser","pipe","res","authenticated","isAuthenticated","factory","providedIn"],"sourceRoot":"","sources":["/Users/marcato/Local_Juliano/PO/po-chatgpt/frontend/src/app/auth.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { Observable, of } from 'rxjs';\nimport { map, catchError } from 'rxjs/operators';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AuthService {\n\n  private authenticated = false;\n\n  constructor(private http: HttpClient) {}\n\n  login(): void {\n    window.location.href = '/auth/google';\n  }\n\n  logout(): Observable<any> {\n    return this.http.get('/logout', { withCredentials: true });\n  }\n\n  getUser(): Observable<{ authenticated: boolean; user?: any }> {\n    return this.http.get<{ authenticated: boolean; user?: any }>('/api/user', { withCredentials: true }).pipe(\n      map(res => {\n        this.authenticated = res.authenticated;\n        return res;\n      }),\n      catchError(() => {\n        this.authenticated = false;\n        return of({ authenticated: false });\n      })\n    );\n  }\n\n  isAuthenticated(): boolean {\n    return this.authenticated;\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}