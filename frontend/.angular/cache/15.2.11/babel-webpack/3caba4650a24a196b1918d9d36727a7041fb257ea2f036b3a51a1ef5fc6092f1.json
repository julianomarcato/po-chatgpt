{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"./auth.service\";\nimport * as i2 from \"@angular/router\";\nexport class AuthGuard {\n  constructor(authService, router) {\n    this.authService = authService;\n    this.router = router;\n  }\n  canActivate() {\n    console.log('üîç AuthGuard verifica√ß√£o...');\n    if (this.authService.isAuthenticated()) {\n      console.log('‚úÖ Usu√°rio autenticado, liberando rota');\n      return true;\n    } else {\n      console.log('‚ùå Usu√°rio n√£o autenticado, redirecionando para /login');\n      this.router.navigate(['/login']);\n      return false;\n    }\n  }\n  static {\n    this.…µfac = function AuthGuard_Factory(t) {\n      return new (t || AuthGuard)(i0.…µ…µinject(i1.AuthService), i0.…µ…µinject(i2.Router));\n    };\n  }\n  static {\n    this.…µprov = /*@__PURE__*/i0.…µ…µdefineInjectable({\n      token: AuthGuard,\n      factory: AuthGuard.…µfac,\n      providedIn: 'root'\n    });\n  }\n}","map":{"version":3,"mappings":";;;AAKA,OAAM,MAAOA,SAAS;EACpBC,YAAoBC,WAAwB,EAAUC,MAAc;IAAhD,gBAAW,GAAXD,WAAW;IAAuB,WAAM,GAANC,MAAM;EAAW;EAEvEC,WAAW;IACTC,OAAO,CAACC,GAAG,CAAC,6BAA6B,CAAC;IAC1C,IAAI,IAAI,CAACJ,WAAW,CAACK,eAAe,EAAE,EAAE;MACtCF,OAAO,CAACC,GAAG,CAAC,uCAAuC,CAAC;MACpD,OAAO,IAAI;KACZ,MAAM;MACLD,OAAO,CAACC,GAAG,CAAC,uDAAuD,CAAC;MACpE,IAAI,CAACH,MAAM,CAACK,QAAQ,CAAC,CAAC,QAAQ,CAAC,CAAC;MAChC,OAAO,KAAK;;EAEhB;;;uBAbWR,SAAS;IAAA;EAAA;;;aAATA,SAAS;MAAAS,SAATT,SAAS;MAAAU,YADI;IAAM;EAAA","names":["AuthGuard","constructor","authService","router","canActivate","console","log","isAuthenticated","navigate","factory","providedIn"],"sourceRoot":"","sources":["/Users/marcato/Local_Juliano/PO/po-chatgpt/frontend/src/app/auth.guard.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { CanActivate, Router } from '@angular/router';\nimport { AuthService } from './auth.service';\n\n@Injectable({ providedIn: 'root' })\nexport class AuthGuard implements CanActivate {\n  constructor(private authService: AuthService, private router: Router) {}\n\n  canActivate(): boolean {\n    console.log('üîç AuthGuard verifica√ß√£o...');\n    if (this.authService.isAuthenticated()) {\n      console.log('‚úÖ Usu√°rio autenticado, liberando rota');\n      return true;\n    } else {\n      console.log('‚ùå Usu√°rio n√£o autenticado, redirecionando para /login');\n      this.router.navigate(['/login']);\n      return false;\n    }\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}