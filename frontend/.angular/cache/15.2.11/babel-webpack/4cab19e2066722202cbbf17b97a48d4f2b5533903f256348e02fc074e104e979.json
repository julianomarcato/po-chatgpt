{"ast":null,"code":"import { BehaviorSubject } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"@angular/router\";\nexport class AuthService {\n  constructor(http, router) {\n    this.http = http;\n    this.router = router;\n    this.apiUrl = 'http://localhost:3000';\n    this.authenticatedSubject = new BehaviorSubject(false);\n    this.authenticated$ = this.authenticatedSubject.asObservable();\n    this.checkAuthentication();\n  }\n  // VERIFIQUE se está autenticado\n  checkAuthentication() {\n    this.http.get(`${this.apiUrl}/api/user`, {\n      withCredentials: true,\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    }).subscribe({\n      next: response => {\n        console.log('Status autenticação:', response.authenticated);\n        this.authenticatedSubject.next(response.authenticated);\n        if (response.authenticated) {\n          this.router.navigate(['/dashboard']);\n        } else {\n          this.router.navigate(['/login']);\n        }\n      },\n      error: error => {\n        console.error('Erro ao verificar autenticação:', error);\n        this.authenticatedSubject.next(false);\n        this.router.navigate(['/login']);\n      }\n    });\n  }\n  isAuthenticated() {\n    return this.authenticatedSubject.value;\n  }\n  loginWithGoogle() {\n    window.location.href = `${this.apiUrl}/auth/google`;\n  }\n  logout() {\n    this.http.get(`${this.apiUrl}/logout`, {\n      withCredentials: true\n    }).subscribe(() => {\n      this.authenticatedSubject.next(false);\n      this.router.navigate(['/login']);\n    });\n  }\n  static {\n    this.ɵfac = function AuthService_Factory(t) {\n      return new (t || AuthService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.Router));\n    };\n  }\n  static {\n    this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: AuthService,\n      factory: AuthService.ɵfac,\n      providedIn: 'root'\n    });\n  }\n}","map":{"version":3,"mappings":"AAIA,SAASA,eAAe,QAAQ,MAAM;;;;AAKtC,OAAM,MAAOC,WAAW;EAKtBC,YAAoBC,IAAgB,EAAUC,MAAc;IAAxC,SAAI,GAAJD,IAAI;IAAsB,WAAM,GAANC,MAAM;IAJ5C,WAAM,GAAG,uBAAuB;IAChC,yBAAoB,GAAG,IAAIJ,eAAe,CAAU,KAAK,CAAC;IAC3D,mBAAc,GAAG,IAAI,CAACK,oBAAoB,CAACC,YAAY,EAAE;IAG9D,IAAI,CAACC,mBAAmB,EAAE;EAC5B;EAEA;EACAA,mBAAmB;IACjB,IAAI,CAACJ,IAAI,CAACK,GAAG,CACX,GAAG,IAAI,CAACC,MAAM,WAAW,EACzB;MACEC,eAAe,EAAE,IAAI;MACrBC,OAAO,EAAE;QACP,cAAc,EAAE;;KAEnB,CACF,CAACC,SAAS,CAAC;MACVC,IAAI,EAAGC,QAAQ,IAAI;QACjBC,OAAO,CAACC,GAAG,CAAC,sBAAsB,EAAEF,QAAQ,CAACG,aAAa,CAAC;QAC3D,IAAI,CAACZ,oBAAoB,CAACQ,IAAI,CAACC,QAAQ,CAACG,aAAa,CAAC;QAEtD,IAAIH,QAAQ,CAACG,aAAa,EAAE;UAC1B,IAAI,CAACb,MAAM,CAACc,QAAQ,CAAC,CAAC,YAAY,CAAC,CAAC;SACrC,MAAM;UACL,IAAI,CAACd,MAAM,CAACc,QAAQ,CAAC,CAAC,QAAQ,CAAC,CAAC;;MAEpC,CAAC;MACDC,KAAK,EAAGA,KAAK,IAAI;QACfJ,OAAO,CAACI,KAAK,CAAC,iCAAiC,EAAEA,KAAK,CAAC;QACvD,IAAI,CAACd,oBAAoB,CAACQ,IAAI,CAAC,KAAK,CAAC;QACrC,IAAI,CAACT,MAAM,CAACc,QAAQ,CAAC,CAAC,QAAQ,CAAC,CAAC;MAClC;KACD,CAAC;EACJ;EAEAE,eAAe;IACb,OAAO,IAAI,CAACf,oBAAoB,CAACgB,KAAK;EACxC;EAEAC,eAAe;IACbC,MAAM,CAACC,QAAQ,CAACC,IAAI,GAAG,GAAG,IAAI,CAAChB,MAAM,cAAc;EACrD;EAEAiB,MAAM;IACJ,IAAI,CAACvB,IAAI,CAACK,GAAG,CACX,GAAG,IAAI,CAACC,MAAM,SAAS,EACvB;MAAEC,eAAe,EAAE;IAAI,CAAE,CAC1B,CAACE,SAAS,CAAC,MAAK;MACf,IAAI,CAACP,oBAAoB,CAACQ,IAAI,CAAC,KAAK,CAAC;MACrC,IAAI,CAACT,MAAM,CAACc,QAAQ,CAAC,CAAC,QAAQ,CAAC,CAAC;IAClC,CAAC,CAAC;EACJ;;;uBAtDWjB,WAAW;IAAA;EAAA;;;aAAXA,WAAW;MAAA0B,SAAX1B,WAAW;MAAA2B,YAFV;IAAM;EAAA","names":["BehaviorSubject","AuthService","constructor","http","router","authenticatedSubject","asObservable","checkAuthentication","get","apiUrl","withCredentials","headers","subscribe","next","response","console","log","authenticated","navigate","error","isAuthenticated","value","loginWithGoogle","window","location","href","logout","factory","providedIn"],"sourceRoot":"","sources":["/Users/marcato/Local_Juliano/PO/po-chatgpt/frontend/src/app/auth.service.ts"],"sourcesContent":["// auth.service.ts - ATUALIZE completamente\nimport { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { Router } from '@angular/router';\nimport { BehaviorSubject } from 'rxjs';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AuthService {\n  private apiUrl = 'http://localhost:3000';\n  private authenticatedSubject = new BehaviorSubject<boolean>(false);\n  public authenticated$ = this.authenticatedSubject.asObservable();\n\n  constructor(private http: HttpClient, private router: Router) {\n    this.checkAuthentication();\n  }\n\n  // VERIFIQUE se está autenticado\n  checkAuthentication() {\n    this.http.get<{authenticated: boolean}>(\n      `${this.apiUrl}/api/user`, \n      { \n        withCredentials: true, // CRÍTICO: envia cookies\n        headers: {\n          'Content-Type': 'application/json'\n        }\n      }\n    ).subscribe({\n      next: (response) => {\n        console.log('Status autenticação:', response.authenticated);\n        this.authenticatedSubject.next(response.authenticated);\n        \n        if (response.authenticated) {\n          this.router.navigate(['/dashboard']);\n        } else {\n          this.router.navigate(['/login']);\n        }\n      },\n      error: (error) => {\n        console.error('Erro ao verificar autenticação:', error);\n        this.authenticatedSubject.next(false);\n        this.router.navigate(['/login']);\n      }\n    });\n  }\n\n  isAuthenticated(): boolean {\n    return this.authenticatedSubject.value;\n  }\n\n  loginWithGoogle() {\n    window.location.href = `${this.apiUrl}/auth/google`;\n  }\n\n  logout() {\n    this.http.get(\n      `${this.apiUrl}/logout`, \n      { withCredentials: true }\n    ).subscribe(() => {\n      this.authenticatedSubject.next(false);\n      this.router.navigate(['/login']);\n    });\n  }\n}"]},"metadata":{},"sourceType":"module","externalDependencies":[]}