{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"../chat-gpt/chat-gpt.service\";\nimport * as i2 from \"@angular/router\";\nexport class LoginComponent {\n  constructor(chatService, router) {\n    this.chatService = chatService;\n    this.router = router;\n    this.aviso = '';\n  }\n  ngOnInit() {\n    // Verifica se usuário já está logado\n    this.chatService.getUser().subscribe({\n      next: res => {\n        if (res.authenticated) {\n          this.router.navigate(['/chat']);\n        }\n      },\n      error: err => {\n        console.warn('Usuário não autenticado no ngOnInit', err);\n      }\n    });\n  }\n  loginGoogle() {\n    // Abrir login Google em nova aba para evitar problema de SPA\n    const loginWindow = window.open('http://localhost:3000/auth/google', '_blank', 'width=600,height=600');\n    // Intervalo para verificar quando a aba é fechada\n    const interval = setInterval(() => {\n      if (loginWindow?.closed) {\n        clearInterval(interval);\n        // Tenta atualizar status do usuário após login\n        this.chatService.getUser().subscribe({\n          next: res => {\n            if (res.authenticated) {\n              this.router.navigate(['/chat']);\n            } else {\n              this.aviso = '❌ Login não finalizado ou usuário não autenticado.';\n            }\n          },\n          error: err => {\n            console.error('Erro ao verificar usuário após login', err);\n            this.aviso = '❌ Ocorreu um erro ao verificar login.';\n          }\n        });\n      }\n    }, 1000);\n  }\n  static {\n    this.ɵfac = function LoginComponent_Factory(t) {\n      return new (t || LoginComponent)(i0.ɵɵdirectiveInject(i1.ChatGptService), i0.ɵɵdirectiveInject(i2.Router));\n    };\n  }\n  static {\n    this.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n      type: LoginComponent,\n      selectors: [[\"app-login\"]],\n      decls: 5,\n      vars: 0,\n      consts: [[1, \"login-container\"], [3, \"click\"]],\n      template: function LoginComponent_Template(rf, ctx) {\n        if (rf & 1) {\n          i0.ɵɵelementStart(0, \"div\", 0)(1, \"h2\");\n          i0.ɵɵtext(2, \"Login\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(3, \"button\", 1);\n          i0.ɵɵlistener(\"click\", function LoginComponent_Template_button_click_3_listener() {\n            return ctx.loginGoogle();\n          });\n          i0.ɵɵtext(4, \"Login com Google\");\n          i0.ɵɵelementEnd()();\n        }\n      },\n      styles: [\"\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZVJvb3QiOiIifQ== */\"]\n    });\n  }\n}","map":{"version":3,"mappings":";;;AAUA,OAAM,MAAOA,cAAc;EAIzBC,YAAoBC,WAA2B,EAAUC,MAAc;IAAnD,gBAAW,GAAXD,WAAW;IAA0B,WAAM,GAANC,MAAM;IAF/D,UAAK,GAAW,EAAE;EAEwD;EAE1EC,QAAQ;IACN;IACA,IAAI,CAACF,WAAW,CAACG,OAAO,EAAE,CAACC,SAAS,CAAC;MACnCC,IAAI,EAAEC,GAAG,IAAG;QACV,IAAGA,GAAG,CAACC,aAAa,EAAE;UACpB,IAAI,CAACN,MAAM,CAACO,QAAQ,CAAC,CAAC,OAAO,CAAC,CAAC;;MAEnC,CAAC;MACDC,KAAK,EAAEC,GAAG,IAAG;QACXC,OAAO,CAACC,IAAI,CAAC,qCAAqC,EAAEF,GAAG,CAAC;MAC1D;KACD,CAAC;EACJ;EAEAG,WAAW;IACT;IACA,MAAMC,WAAW,GAAGC,MAAM,CAACC,IAAI,CAAC,mCAAmC,EAAE,QAAQ,EAAE,sBAAsB,CAAC;IAEtG;IACA,MAAMC,QAAQ,GAAGC,WAAW,CAAC,MAAK;MAChC,IAAGJ,WAAW,EAAEK,MAAM,EAAE;QACtBC,aAAa,CAACH,QAAQ,CAAC;QACvB;QACA,IAAI,CAACjB,WAAW,CAACG,OAAO,EAAE,CAACC,SAAS,CAAC;UACnCC,IAAI,EAAEC,GAAG,IAAG;YACV,IAAGA,GAAG,CAACC,aAAa,EAAC;cACnB,IAAI,CAACN,MAAM,CAACO,QAAQ,CAAC,CAAC,OAAO,CAAC,CAAC;aAChC,MAAM;cACL,IAAI,CAACa,KAAK,GAAG,oDAAoD;;UAErE,CAAC;UACDZ,KAAK,EAAEC,GAAG,IAAG;YACXC,OAAO,CAACF,KAAK,CAAC,sCAAsC,EAAEC,GAAG,CAAC;YAC1D,IAAI,CAACW,KAAK,GAAG,uCAAuC;UACtD;SACD,CAAC;;IAEN,CAAC,EAAE,IAAI,CAAC;EACV;;;uBA5CWvB,cAAc;IAAA;EAAA;;;YAAdA,cAAc;MAAAwB;MAAAC;MAAAC;MAAAC;MAAAC;QAAA;UCV3BC,8BAA6B;UACvBA,qBAAK;UAAAA,iBAAK;UACdA,iCAAgC;UAAxBA;YAAA,OAASC,iBAAa;UAAA,EAAC;UAACD,gCAAgB;UAAAA,iBAAS","names":["LoginComponent","constructor","chatService","router","ngOnInit","getUser","subscribe","next","res","authenticated","navigate","error","err","console","warn","loginGoogle","loginWindow","window","open","interval","setInterval","closed","clearInterval","aviso","selectors","decls","vars","consts","template","i0","ctx"],"sourceRoot":"","sources":["/Users/marcato/Local_Juliano/PO/po-chatgpt/frontend/src/app/login/login.component.ts","/Users/marcato/Local_Juliano/PO/po-chatgpt/frontend/src/app/login/login.component.html"],"sourcesContent":["// src/app/login/login.component.ts\nimport { Component, OnInit } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { ChatGptService } from '../chat-gpt/chat-gpt.service';\n\n@Component({\n  selector: 'app-login',\n  templateUrl: './login.component.html',\n  styleUrls: ['./login.component.css']\n})\nexport class LoginComponent implements OnInit {\n\n  aviso: string = '';\n\n  constructor(private chatService: ChatGptService, private router: Router) {}\n\n  ngOnInit() {\n    // Verifica se usuário já está logado\n    this.chatService.getUser().subscribe({\n      next: res => {\n        if(res.authenticated) {\n          this.router.navigate(['/chat']);\n        }\n      },\n      error: err => {\n        console.warn('Usuário não autenticado no ngOnInit', err);\n      }\n    });\n  }\n\n  loginGoogle() {\n    // Abrir login Google em nova aba para evitar problema de SPA\n    const loginWindow = window.open('http://localhost:3000/auth/google', '_blank', 'width=600,height=600');\n\n    // Intervalo para verificar quando a aba é fechada\n    const interval = setInterval(() => {\n      if(loginWindow?.closed) {\n        clearInterval(interval);\n        // Tenta atualizar status do usuário após login\n        this.chatService.getUser().subscribe({\n          next: res => {\n            if(res.authenticated){\n              this.router.navigate(['/chat']);\n            } else {\n              this.aviso = '❌ Login não finalizado ou usuário não autenticado.';\n            }\n          },\n          error: err => {\n            console.error('Erro ao verificar usuário após login', err);\n            this.aviso = '❌ Ocorreu um erro ao verificar login.';\n          }\n        });\n      }\n    }, 1000);\n  }\n}\n","<div class=\"login-container\">\n  <h2>Login</h2>\n  <button (click)=\"loginGoogle()\">Login com Google</button>\n</div>\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}