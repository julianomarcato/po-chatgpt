{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"./chat-gpt.service\";\nimport * as i2 from \"@angular/common\";\nimport * as i3 from \"@angular/forms\";\nfunction ChatGptComponent_option_4_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"option\", 6);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ai_r2 = ctx.$implicit;\n    i0.ɵɵproperty(\"value\", ai_r2);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate(ai_r2);\n  }\n}\nfunction ChatGptComponent_div_8_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 7)(1, \"strong\");\n    i0.ɵɵtext(2, \"Resposta:\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(3, \"p\");\n    i0.ɵɵtext(4);\n    i0.ɵɵelementEnd()();\n  }\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(4);\n    i0.ɵɵtextInterpolate(ctx_r1.resposta);\n  }\n}\nexport class ChatGptComponent {\n  constructor(chatService) {\n    this.chatService = chatService;\n    this.prompt = '';\n    this.resposta = '';\n    this.selectedAI = 'gpt'; // nomes minúsculos para o backend\n    this.availableAIs = [];\n  }\n  ngOnInit() {\n    this.chatService.getAvailableAIs().subscribe(res => {\n      this.availableAIs = res.ais.map(ai => ai.toLowerCase());\n    });\n  }\n  enviarPrompt() {\n    if (!this.prompt || !this.selectedAI) return;\n    this.chatService.sendPrompt(this.prompt, this.selectedAI).subscribe({\n      next: res => this.resposta = res.resposta,\n      error: err => this.resposta = 'Erro ao enviar prompt'\n    });\n  }\n  static {\n    this.ɵfac = function ChatGptComponent_Factory(t) {\n      return new (t || ChatGptComponent)(i0.ɵɵdirectiveInject(i1.ChatGptService));\n    };\n  }\n  static {\n    this.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n      type: ChatGptComponent,\n      selectors: [[\"app-chat-gpt\"]],\n      decls: 9,\n      vars: 4,\n      consts: [[1, \"chat-container\"], [3, \"ngModel\", \"ngModelChange\"], [3, \"value\", 4, \"ngFor\", \"ngForOf\"], [\"placeholder\", \"Digite sua pergunta\", 3, \"ngModel\", \"ngModelChange\"], [3, \"click\"], [\"class\", \"resposta\", 4, \"ngIf\"], [3, \"value\"], [1, \"resposta\"]],\n      template: function ChatGptComponent_Template(rf, ctx) {\n        if (rf & 1) {\n          i0.ɵɵelementStart(0, \"div\", 0)(1, \"h2\");\n          i0.ɵɵtext(2, \"Chat GPT\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(3, \"select\", 1);\n          i0.ɵɵlistener(\"ngModelChange\", function ChatGptComponent_Template_select_ngModelChange_3_listener($event) {\n            return ctx.selectedAI = $event;\n          });\n          i0.ɵɵtemplate(4, ChatGptComponent_option_4_Template, 2, 2, \"option\", 2);\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(5, \"textarea\", 3);\n          i0.ɵɵlistener(\"ngModelChange\", function ChatGptComponent_Template_textarea_ngModelChange_5_listener($event) {\n            return ctx.prompt = $event;\n          });\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(6, \"button\", 4);\n          i0.ɵɵlistener(\"click\", function ChatGptComponent_Template_button_click_6_listener() {\n            return ctx.enviarPrompt();\n          });\n          i0.ɵɵtext(7, \"Enviar\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵtemplate(8, ChatGptComponent_div_8_Template, 5, 1, \"div\", 5);\n          i0.ɵɵelementEnd();\n        }\n        if (rf & 2) {\n          i0.ɵɵadvance(3);\n          i0.ɵɵproperty(\"ngModel\", ctx.selectedAI);\n          i0.ɵɵadvance(1);\n          i0.ɵɵproperty(\"ngForOf\", ctx.availableAIs);\n          i0.ɵɵadvance(1);\n          i0.ɵɵproperty(\"ngModel\", ctx.prompt);\n          i0.ɵɵadvance(3);\n          i0.ɵɵproperty(\"ngIf\", ctx.resposta);\n        }\n      },\n      dependencies: [i2.NgForOf, i2.NgIf, i3.NgSelectOption, i3.ɵNgSelectMultipleOption, i3.DefaultValueAccessor, i3.SelectControlValueAccessor, i3.NgControlStatus, i3.NgModel],\n      styles: [\"\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZVJvb3QiOiIifQ== */\"]\n    });\n  }\n}","map":{"version":3,"mappings":";;;;;;IAIIA,iCAAqD;IAAAA,YAAQ;IAAAA,iBAAS;;;;IAA9BA,6BAAY;IAACA,eAAQ;IAARA,2BAAQ;;;;;IAM/DA,8BAAuC;IAC7BA,yBAAS;IAAAA,iBAAS;IAC1BA,yBAAG;IAAAA,YAAc;IAAAA,iBAAI;;;;IAAlBA,eAAc;IAAdA,qCAAc;;;ACHrB,OAAM,MAAOC,gBAAgB;EAO3BC,YAAoBC,WAA2B;IAA3B,gBAAW,GAAXA,WAAW;IAL/B,WAAM,GAAW,EAAE;IACnB,aAAQ,GAAW,EAAE;IACrB,eAAU,GAAW,KAAK,CAAC,CAAC;IAC5B,iBAAY,GAAa,EAAE;EAEwB;EAEnDC,QAAQ;IACN,IAAI,CAACD,WAAW,CAACE,eAAe,EAAE,CAACC,SAAS,CAACC,GAAG,IAAG;MACjD,IAAI,CAACC,YAAY,GAAGD,GAAG,CAACE,GAAG,CAACC,GAAG,CAACC,EAAE,IAAIA,EAAE,CAACC,WAAW,EAAE,CAAC;IACzD,CAAC,CAAC;EACJ;EAEAC,YAAY;IACV,IAAI,CAAC,IAAI,CAACC,MAAM,IAAI,CAAC,IAAI,CAACC,UAAU,EAAE;IAEtC,IAAI,CAACZ,WAAW,CAACa,UAAU,CAAC,IAAI,CAACF,MAAM,EAAE,IAAI,CAACC,UAAU,CAAC,CAACT,SAAS,CAAC;MAClEW,IAAI,EAAEV,GAAG,IAAI,IAAI,CAACW,QAAQ,GAAGX,GAAG,CAACW,QAAQ;MACzCC,KAAK,EAAEC,GAAG,IAAI,IAAI,CAACF,QAAQ,GAAG;KAC/B,CAAC;EACJ;;;uBAtBWjB,gBAAgB;IAAA;EAAA;;;YAAhBA,gBAAgB;MAAAoB;MAAAC;MAAAC;MAAAC;MAAAC;QAAA;UDT7BzB,8BAA4B;UACtBA,wBAAQ;UAAAA,iBAAK;UAEjBA,iCAAiC;UAAzBA;YAAA;UAAA,EAAwB;UAC9BA,uEAAsE;UACxEA,iBAAS;UAETA,mCAAiE;UAAvDA;YAAA;UAAA,EAAoB;UAAmCA,iBAAW;UAC5EA,iCAAiC;UAAzBA;YAAA,OAAS0B,kBAAc;UAAA,EAAC;UAAC1B,sBAAM;UAAAA,iBAAS;UAEhDA,iEAGM;UACRA,iBAAM;;;UAXIA,eAAwB;UAAxBA,wCAAwB;UACPA,eAAe;UAAfA,0CAAe;UAG9BA,eAAoB;UAApBA,oCAAoB;UAGPA,eAAc;UAAdA,mCAAc","names":["i0","ChatGptComponent","constructor","chatService","ngOnInit","getAvailableAIs","subscribe","res","availableAIs","ais","map","ai","toLowerCase","enviarPrompt","prompt","selectedAI","sendPrompt","next","resposta","error","err","selectors","decls","vars","consts","template","ctx"],"sourceRoot":"","sources":["/Users/marcato/Local_Juliano/PO/po-chatgpt/frontend/src/app/chat-gpt/chat-gpt.component.html","/Users/marcato/Local_Juliano/PO/po-chatgpt/frontend/src/app/chat-gpt/chat-gpt.component.ts"],"sourcesContent":["<div class=\"chat-container\">\n  <h2>Chat GPT</h2>\n\n  <select [(ngModel)]=\"selectedAI\">\n    <option *ngFor=\"let ai of availableAIs\" [value]=\"ai\">{{ ai }}</option>\n  </select>\n\n  <textarea [(ngModel)]=\"prompt\" placeholder=\"Digite sua pergunta\"></textarea>\n  <button (click)=\"enviarPrompt()\">Enviar</button>\n\n  <div class=\"resposta\" *ngIf=\"resposta\">\n    <strong>Resposta:</strong>\n    <p>{{ resposta }}</p>\n  </div>\n</div>\n","// src/app/chat-gpt/chat-gpt.component.ts\nimport { Component, OnInit } from '@angular/core';\nimport { ChatGptService } from './chat-gpt.service';\n\n@Component({\n  selector: 'app-chat-gpt',\n  templateUrl: './chat-gpt.component.html',\n  styleUrls: ['./chat-gpt.component.css']\n})\nexport class ChatGptComponent implements OnInit {\n\n  prompt: string = '';\n  resposta: string = '';\n  selectedAI: string = 'gpt'; // nomes minúsculos para o backend\n  availableAIs: string[] = [];\n\n  constructor(private chatService: ChatGptService) { }\n\n  ngOnInit(): void {\n    this.chatService.getAvailableAIs().subscribe(res => {\n      this.availableAIs = res.ais.map(ai => ai.toLowerCase());\n    });\n  }\n\n  enviarPrompt(): void {\n    if (!this.prompt || !this.selectedAI) return;\n\n    this.chatService.sendPrompt(this.prompt, this.selectedAI).subscribe({\n      next: res => this.resposta = res.resposta,\n      error: err => this.resposta = 'Erro ao enviar prompt'\n    });\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}