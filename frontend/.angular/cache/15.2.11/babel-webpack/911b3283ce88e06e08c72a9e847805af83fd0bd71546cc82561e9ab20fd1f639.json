{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"./chat-gpt.service\";\nimport * as i2 from \"@angular/common\";\nfunction ChatGptComponent_option_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"option\", 5);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ai_r2 = ctx.$implicit;\n    i0.ɵɵproperty(\"value\", ai_r2);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate(ai_r2);\n  }\n}\nfunction ChatGptComponent_div_5_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\")(1, \"h3\");\n    i0.ɵɵtext(2, \"Resposta:\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(3, \"p\");\n    i0.ɵɵtext(4);\n    i0.ɵɵelementEnd()();\n  }\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(4);\n    i0.ɵɵtextInterpolate(ctx_r1.resposta);\n  }\n}\nexport class ChatGptComponent {\n  constructor(chatService) {\n    this.chatService = chatService;\n    this.prompt = '';\n    this.resposta = '';\n    this.selectedAI = '';\n    this.availableAIs = [];\n  }\n  ngOnInit() {\n    this.chatService.getSession().subscribe({\n      next: res => this.user = res.user,\n      error: err => console.error(err)\n    });\n    this.chatService.getAvailableAIs().subscribe({\n      next: res => {\n        this.availableAIs = res.ais;\n        if (this.availableAIs.length) this.selectedAI = this.availableAIs[0];\n      },\n      error: err => console.error(err)\n    });\n  }\n  enviarPrompt() {\n    this.chatService.enviarPrompt(this.prompt, this.selectedAI).subscribe({\n      next: res => this.resposta = res.resposta,\n      error: err => console.error(err)\n    });\n  }\n  static {\n    this.ɵfac = function ChatGptComponent_Factory(t) {\n      return new (t || ChatGptComponent)(i0.ɵɵdirectiveInject(i1.ChatGptService));\n    };\n  }\n  static {\n    this.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n      type: ChatGptComponent,\n      selectors: [[\"app-chat-gpt\"]],\n      decls: 6,\n      vars: 4,\n      consts: [[3, \"ngModel\", \"ngModelChange\"], [3, \"value\", 4, \"ngFor\", \"ngForOf\"], [\"placeholder\", \"Digite sua pergunta\", 3, \"ngModel\", \"ngModelChange\"], [3, \"click\"], [4, \"ngIf\"], [3, \"value\"]],\n      template: function ChatGptComponent_Template(rf, ctx) {\n        if (rf & 1) {\n          i0.ɵɵelementStart(0, \"select\", 0);\n          i0.ɵɵlistener(\"ngModelChange\", function ChatGptComponent_Template_select_ngModelChange_0_listener($event) {\n            return ctx.selectedAI = $event;\n          });\n          i0.ɵɵtemplate(1, ChatGptComponent_option_1_Template, 2, 2, \"option\", 1);\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(2, \"textarea\", 2);\n          i0.ɵɵlistener(\"ngModelChange\", function ChatGptComponent_Template_textarea_ngModelChange_2_listener($event) {\n            return ctx.prompt = $event;\n          });\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(3, \"button\", 3);\n          i0.ɵɵlistener(\"click\", function ChatGptComponent_Template_button_click_3_listener() {\n            return ctx.enviarPrompt();\n          });\n          i0.ɵɵtext(4, \"Enviar\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵtemplate(5, ChatGptComponent_div_5_Template, 5, 1, \"div\", 4);\n        }\n        if (rf & 2) {\n          i0.ɵɵproperty(\"ngModel\", ctx.selectedAI);\n          i0.ɵɵadvance(1);\n          i0.ɵɵproperty(\"ngForOf\", ctx.availableAIs);\n          i0.ɵɵadvance(1);\n          i0.ɵɵproperty(\"ngModel\", ctx.prompt);\n          i0.ɵɵadvance(3);\n          i0.ɵɵproperty(\"ngIf\", ctx.resposta);\n        }\n      },\n      dependencies: [i2.NgForOf, i2.NgIf],\n      encapsulation: 2\n    });\n  }\n}","map":{"version":3,"mappings":";;;;;IACEA,iCAAqD;IAAAA,YAAQ;IAAAA,iBAAS;;;;IAA9BA,6BAAY;IAACA,eAAQ;IAARA,2BAAQ;;;;;IAO/DA,2BAAsB;IAChBA,yBAAS;IAAAA,iBAAK;IAClBA,yBAAG;IAAAA,YAAc;IAAAA,iBAAI;;;;IAAlBA,eAAc;IAAdA,qCAAc;;;ACHnB,OAAM,MAAOC,gBAAgB;EAO3BC,YAAoBC,WAA2B;IAA3B,gBAAW,GAAXA,WAAW;IAL/B,WAAM,GAAG,EAAE;IACX,aAAQ,GAAG,EAAE;IACb,eAAU,GAAG,EAAE;IACf,iBAAY,GAAa,EAAE;EAEuB;EAElDC,QAAQ;IACN,IAAI,CAACD,WAAW,CAACE,UAAU,EAAE,CAACC,SAAS,CAAC;MAAEC,IAAI,EAAEC,GAAG,IAAI,IAAI,CAACC,IAAI,GAAGD,GAAG,CAACC,IAAI;MAAEC,KAAK,EAAEC,GAAG,IAAIC,OAAO,CAACF,KAAK,CAACC,GAAG;IAAC,CAAE,CAAC;IAChH,IAAI,CAACR,WAAW,CAACU,eAAe,EAAE,CAACP,SAAS,CAAC;MAAEC,IAAI,EAAEC,GAAG,IAAG;QAAG,IAAI,CAACM,YAAY,GAAGN,GAAG,CAACO,GAAG;QAAE,IAAG,IAAI,CAACD,YAAY,CAACE,MAAM,EAAE,IAAI,CAACC,UAAU,GAAG,IAAI,CAACH,YAAY,CAAC,CAAC,CAAC;MAAE,CAAC;MAAEJ,KAAK,EAAEC,GAAG,IAAIC,OAAO,CAACF,KAAK,CAACC,GAAG;IAAC,CAAE,CAAC;EACxM;EAEAO,YAAY;IACV,IAAI,CAACf,WAAW,CAACe,YAAY,CAAC,IAAI,CAACC,MAAM,EAAE,IAAI,CAACF,UAAU,CAAC,CAACX,SAAS,CAAC;MAAEC,IAAI,EAAEC,GAAG,IAAI,IAAI,CAACY,QAAQ,GAAGZ,GAAG,CAACY,QAAQ;MAAEV,KAAK,EAAEC,GAAG,IAAIC,OAAO,CAACF,KAAK,CAACC,GAAG;IAAC,CAAE,CAAC;EACxJ;;;uBAhBWV,gBAAgB;IAAA;EAAA;;;YAAhBA,gBAAgB;MAAAoB;MAAAC;MAAAC;MAAAC;MAAAC;QAAA;UDP7BzB,iCAAiC;UAAzBA;YAAA;UAAA,EAAwB;UAC9BA,uEAAsE;UACxEA,iBAAS;UAETA,mCAAiE;UAAvDA;YAAA;UAAA,EAAoB;UAAmCA,iBAAW;UAE5EA,iCAAiC;UAAzBA;YAAA,OAAS0B,kBAAc;UAAA,EAAC;UAAC1B,sBAAM;UAAAA,iBAAS;UAEhDA,iEAGM;;;UAXEA,wCAAwB;UACPA,eAAe;UAAfA,0CAAe;UAG9BA,eAAoB;UAApBA,oCAAoB;UAIxBA,eAAc;UAAdA,mCAAc","names":["i0","ChatGptComponent","constructor","chatService","ngOnInit","getSession","subscribe","next","res","user","error","err","console","getAvailableAIs","availableAIs","ais","length","selectedAI","enviarPrompt","prompt","resposta","selectors","decls","vars","consts","template","ctx"],"sourceRoot":"","sources":["/Users/marcato/Local_Juliano/PO/po-chatgpt/frontend/src/app/chat-gpt/chat-gpt.component.html","/Users/marcato/Local_Juliano/PO/po-chatgpt/frontend/src/app/chat-gpt/chat-gpt.component.ts"],"sourcesContent":["<select [(ngModel)]=\"selectedAI\">\n  <option *ngFor=\"let ai of availableAIs\" [value]=\"ai\">{{ ai }}</option>\n</select>\n\n<textarea [(ngModel)]=\"prompt\" placeholder=\"Digite sua pergunta\"></textarea>\n\n<button (click)=\"enviarPrompt()\">Enviar</button>\n\n<div *ngIf=\"resposta\">\n  <h3>Resposta:</h3>\n  <p>{{ resposta }}</p>\n</div>\n","import { Component, OnInit } from '@angular/core';\nimport { ChatGptService } from './chat-gpt.service';\n\n@Component({\n  selector: 'app-chat-gpt',\n  templateUrl: './chat-gpt.component.html',\n})\nexport class ChatGptComponent implements OnInit {\n  user: any;\n  prompt = '';\n  resposta = '';\n  selectedAI = '';\n  availableAIs: string[] = [];\n\n  constructor(private chatService: ChatGptService) {}\n\n  ngOnInit() {\n    this.chatService.getSession().subscribe({ next: res => this.user = res.user, error: err => console.error(err) });\n    this.chatService.getAvailableAIs().subscribe({ next: res => { this.availableAIs = res.ais; if(this.availableAIs.length) this.selectedAI = this.availableAIs[0]; }, error: err => console.error(err) });\n  }\n\n  enviarPrompt() {\n    this.chatService.enviarPrompt(this.prompt, this.selectedAI).subscribe({ next: res => this.resposta = res.resposta, error: err => console.error(err) });\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}