{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class AuthService {\n  constructor(http) {\n    this.http = http;\n    this.apiUrl = 'http://localhost:3000/api';\n  }\n  isAuthenticated() {\n    return !!localStorage.getItem('user');\n  }\n  getUser() {\n    return this.http.get(`${this.apiUrl}/user`, {\n      withCredentials: true\n    });\n  }\n  logout() {\n    localStorage.removeItem('user');\n    window.location.href = 'http://localhost:3000/logout';\n  }\n  static {\n    this.ɵfac = function AuthService_Factory(t) {\n      return new (t || AuthService)(i0.ɵɵinject(i1.HttpClient));\n    };\n  }\n  static {\n    this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: AuthService,\n      factory: AuthService.ɵfac,\n      providedIn: 'root'\n    });\n  }\n}","map":{"version":3,"mappings":";;AAKA,OAAM,MAAOA,WAAW;EAGtBC,YAAoBC,IAAgB;IAAhB,SAAI,GAAJA,IAAI;IAFhB,WAAM,GAAG,2BAA2B;EAEL;EAEvCC,eAAe;IACb,OAAO,CAAC,CAACC,YAAY,CAACC,OAAO,CAAC,MAAM,CAAC;EACvC;EAEAC,OAAO;IACL,OAAO,IAAI,CAACJ,IAAI,CAACK,GAAG,CAAM,GAAG,IAAI,CAACC,MAAM,OAAO,EAAE;MAAEC,eAAe,EAAE;IAAI,CAAE,CAAC;EAC7E;EAEAC,MAAM;IACJN,YAAY,CAACO,UAAU,CAAC,MAAM,CAAC;IAC/BC,MAAM,CAACC,QAAQ,CAACC,IAAI,GAAG,8BAA8B;EACvD;;;uBAhBWd,WAAW;IAAA;EAAA;;;aAAXA,WAAW;MAAAe,SAAXf,WAAW;MAAAgB,YADE;IAAM;EAAA","names":["AuthService","constructor","http","isAuthenticated","localStorage","getItem","getUser","get","apiUrl","withCredentials","logout","removeItem","window","location","href","factory","providedIn"],"sourceRoot":"","sources":["/Users/marcato/Local_Juliano/PO/po-chatgpt/frontend/src/app/auth.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { Observable } from 'rxjs';\n\n@Injectable({ providedIn: 'root' })\nexport class AuthService {\n  private apiUrl = 'http://localhost:3000/api';\n\n  constructor(private http: HttpClient) {}\n\n  isAuthenticated(): boolean {\n    return !!localStorage.getItem('user');\n  }\n\n  getUser(): Observable<any> {\n    return this.http.get<any>(`${this.apiUrl}/user`, { withCredentials: true });\n  }\n\n  logout(): void {\n    localStorage.removeItem('user');\n    window.location.href = 'http://localhost:3000/logout';\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}