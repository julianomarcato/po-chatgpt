{"ast":null,"code":"import { of } from 'rxjs';\nimport { map, catchError } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"./auth.service\";\nimport * as i2 from \"@angular/router\";\nexport class AuthGuard {\n  constructor(authService, router) {\n    this.authService = authService;\n    this.router = router;\n  }\n  canActivate() {\n    console.log('üîç AuthGuard verifica√ß√£o...');\n    return this.authService.checkAuth().pipe(map(authenticated => {\n      if (authenticated) {\n        console.log('‚úÖ Usu√°rio autenticado, liberando rota');\n        return true;\n      } else {\n        console.log('‚ùå Usu√°rio n√£o autenticado, redirecionando para /login');\n        this.router.navigate(['/login']);\n        return false;\n      }\n    }), catchError(err => {\n      console.error('‚ùå Erro ao checar auth', err);\n      this.router.navigate(['/login']);\n      return of(false);\n    }));\n  }\n  static {\n    this.…µfac = function AuthGuard_Factory(t) {\n      return new (t || AuthGuard)(i0.…µ…µinject(i1.AuthService), i0.…µ…µinject(i2.Router));\n    };\n  }\n  static {\n    this.…µprov = /*@__PURE__*/i0.…µ…µdefineInjectable({\n      token: AuthGuard,\n      factory: AuthGuard.…µfac,\n      providedIn: 'root'\n    });\n  }\n}","map":{"version":3,"mappings":"AAIA,SAAqBA,EAAE,QAAQ,MAAM;AACrC,SAASC,GAAG,EAAEC,UAAU,QAAQ,gBAAgB;;;;AAGhD,OAAM,MAAOC,SAAS;EACpBC,YAAoBC,WAAwB,EAAUC,MAAc;IAAhD,gBAAW,GAAXD,WAAW;IAAuB,WAAM,GAANC,MAAM;EAAW;EAEvEC,WAAW;IACTC,OAAO,CAACC,GAAG,CAAC,6BAA6B,CAAC;IAC1C,OAAO,IAAI,CAACJ,WAAW,CAACK,SAAS,EAAE,CAACC,IAAI,CACtCV,GAAG,CAACW,aAAa,IAAG;MAClB,IAAIA,aAAa,EAAE;QACjBJ,OAAO,CAACC,GAAG,CAAC,uCAAuC,CAAC;QACpD,OAAO,IAAI;OACZ,MAAM;QACLD,OAAO,CAACC,GAAG,CAAC,uDAAuD,CAAC;QACpE,IAAI,CAACH,MAAM,CAACO,QAAQ,CAAC,CAAC,QAAQ,CAAC,CAAC;QAChC,OAAO,KAAK;;IAEhB,CAAC,CAAC,EACFX,UAAU,CAACY,GAAG,IAAG;MACfN,OAAO,CAACO,KAAK,CAAC,uBAAuB,EAAED,GAAG,CAAC;MAC3C,IAAI,CAACR,MAAM,CAACO,QAAQ,CAAC,CAAC,QAAQ,CAAC,CAAC;MAChC,OAAOb,EAAE,CAAC,KAAK,CAAC;IAClB,CAAC,CAAC,CACH;EACH;;;uBAtBWG,SAAS;IAAA;EAAA;;;aAATA,SAAS;MAAAa,SAATb,SAAS;MAAAc,YADI;IAAM;EAAA","names":["of","map","catchError","AuthGuard","constructor","authService","router","canActivate","console","log","checkAuth","pipe","authenticated","navigate","err","error","factory","providedIn"],"sourceRoot":"","sources":["/Users/marcato/Local_Juliano/PO/po-chatgpt/frontend/src/app/auth.guard.ts"],"sourcesContent":["// frontend/src/app/auth.guard.ts\nimport { Injectable } from '@angular/core';\nimport { CanActivate, Router } from '@angular/router';\nimport { AuthService } from './auth.service';\nimport { Observable, of } from 'rxjs';\nimport { map, catchError } from 'rxjs/operators';\n\n@Injectable({ providedIn: 'root' })\nexport class AuthGuard implements CanActivate {\n  constructor(private authService: AuthService, private router: Router) {}\n\n  canActivate(): Observable<boolean> {\n    console.log('üîç AuthGuard verifica√ß√£o...');\n    return this.authService.checkAuth().pipe(\n      map(authenticated => {\n        if (authenticated) {\n          console.log('‚úÖ Usu√°rio autenticado, liberando rota');\n          return true;\n        } else {\n          console.log('‚ùå Usu√°rio n√£o autenticado, redirecionando para /login');\n          this.router.navigate(['/login']);\n          return false;\n        }\n      }),\n      catchError(err => {\n        console.error('‚ùå Erro ao checar auth', err);\n        this.router.navigate(['/login']);\n        return of(false);\n      })\n    );\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}