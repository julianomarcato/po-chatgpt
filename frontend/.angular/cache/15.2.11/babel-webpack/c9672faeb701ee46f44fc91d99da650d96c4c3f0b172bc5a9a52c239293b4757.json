{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"@angular/common\";\nimport * as i3 from \"@angular/forms\";\nfunction ChatGptComponent_option_4_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"option\", 6);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ai_r1 = ctx.$implicit;\n    i0.ɵɵproperty(\"value\", ai_r1);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate(ai_r1);\n  }\n}\nexport class ChatGptComponent {\n  constructor(http) {\n    this.http = http;\n    this.prompt = '';\n    this.resposta = '';\n    this.selectedAI = 'gpt';\n    this.availableAIs = ['gpt', 'deepseek', 'gemini'];\n    this.apiUrl = 'http://localhost:3000/api';\n  }\n  ngOnInit() {}\n  enviarPrompt() {\n    if (!this.prompt) return;\n    this.http.post(`${this.apiUrl}/prompt`, {\n      prompt: this.prompt,\n      ai: this.selectedAI\n    }, {\n      withCredentials: true\n    }).subscribe({\n      next: res => this.resposta = res.resposta,\n      error: err => console.error('Erro ao enviar prompt', err)\n    });\n  }\n  static {\n    this.ɵfac = function ChatGptComponent_Factory(t) {\n      return new (t || ChatGptComponent)(i0.ɵɵdirectiveInject(i1.HttpClient));\n    };\n  }\n  static {\n    this.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n      type: ChatGptComponent,\n      selectors: [[\"app-chat-gpt\"]],\n      decls: 10,\n      vars: 4,\n      consts: [[1, \"chat-container\"], [3, \"ngModel\", \"ngModelChange\"], [3, \"value\", 4, \"ngFor\", \"ngForOf\"], [\"placeholder\", \"Digite sua pergunta\", 3, \"ngModel\", \"ngModelChange\"], [3, \"click\"], [1, \"resposta\"], [3, \"value\"]],\n      template: function ChatGptComponent_Template(rf, ctx) {\n        if (rf & 1) {\n          i0.ɵɵelementStart(0, \"div\", 0)(1, \"h2\");\n          i0.ɵɵtext(2, \"Chat GPT\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(3, \"select\", 1);\n          i0.ɵɵlistener(\"ngModelChange\", function ChatGptComponent_Template_select_ngModelChange_3_listener($event) {\n            return ctx.selectedAI = $event;\n          });\n          i0.ɵɵtemplate(4, ChatGptComponent_option_4_Template, 2, 2, \"option\", 2);\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(5, \"textarea\", 3);\n          i0.ɵɵlistener(\"ngModelChange\", function ChatGptComponent_Template_textarea_ngModelChange_5_listener($event) {\n            return ctx.prompt = $event;\n          });\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(6, \"button\", 4);\n          i0.ɵɵlistener(\"click\", function ChatGptComponent_Template_button_click_6_listener() {\n            return ctx.enviarPrompt();\n          });\n          i0.ɵɵtext(7, \"Enviar\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(8, \"div\", 5);\n          i0.ɵɵtext(9);\n          i0.ɵɵelementEnd()();\n        }\n        if (rf & 2) {\n          i0.ɵɵadvance(3);\n          i0.ɵɵproperty(\"ngModel\", ctx.selectedAI);\n          i0.ɵɵadvance(1);\n          i0.ɵɵproperty(\"ngForOf\", ctx.availableAIs);\n          i0.ɵɵadvance(1);\n          i0.ɵɵproperty(\"ngModel\", ctx.prompt);\n          i0.ɵɵadvance(4);\n          i0.ɵɵtextInterpolate(ctx.resposta);\n        }\n      },\n      dependencies: [i2.NgForOf, i3.NgSelectOption, i3.ɵNgSelectMultipleOption, i3.DefaultValueAccessor, i3.SelectControlValueAccessor, i3.NgControlStatus, i3.NgModel],\n      styles: [\"\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZVJvb3QiOiIifQ== */\"]\n    });\n  }\n}","map":{"version":3,"mappings":";;;;;;IAGIA,iCAAqD;IAAAA,YAAQ;IAAAA,iBAAS;;;;IAA9BA,6BAAY;IAACA,eAAQ;IAARA,2BAAQ;;;ACMjE,OAAM,MAAOC,gBAAgB;EAO3BC,YAAoBC,IAAgB;IAAhB,SAAI,GAAJA,IAAI;IANxB,WAAM,GAAW,EAAE;IACnB,aAAQ,GAAW,EAAE;IACrB,eAAU,GAAW,KAAK;IAC1B,iBAAY,GAAa,CAAC,KAAK,EAAE,UAAU,EAAE,QAAQ,CAAC;IAC9C,WAAM,GAAG,2BAA2B;EAEL;EAEvCC,QAAQ,IAAU;EAElBC,YAAY;IACV,IAAI,CAAC,IAAI,CAACC,MAAM,EAAE;IAClB,IAAI,CAACH,IAAI,CAACI,IAAI,CAAC,GAAG,IAAI,CAACC,MAAM,SAAS,EAAE;MAAEF,MAAM,EAAE,IAAI,CAACA,MAAM;MAAEG,EAAE,EAAE,IAAI,CAACC;IAAU,CAAE,EAAE;MAAEC,eAAe,EAAE;IAAI,CAAE,CAAC,CAC7GC,SAAS,CAAC;MACTC,IAAI,EAAGC,GAAQ,IAAK,IAAI,CAACC,QAAQ,GAAGD,GAAG,CAACC,QAAQ;MAChDC,KAAK,EAAEC,GAAG,IAAIC,OAAO,CAACF,KAAK,CAAC,uBAAuB,EAAEC,GAAG;KACzD,CAAC;EACN;;;uBAlBWhB,gBAAgB;IAAA;EAAA;;;YAAhBA,gBAAgB;MAAAkB;MAAAC;MAAAC;MAAAC;MAAAC;QAAA;UDT7BvB,8BAA4B;UACtBA,wBAAQ;UAAAA,iBAAK;UACjBA,iCAAiC;UAAzBA;YAAA;UAAA,EAAwB;UAC9BA,uEAAsE;UACxEA,iBAAS;UACTA,mCAAiE;UAAvDA;YAAA;UAAA,EAAoB;UAAmCA,iBAAW;UAC5EA,iCAAiC;UAAzBA;YAAA,OAASwB,kBAAc;UAAA,EAAC;UAACxB,sBAAM;UAAAA,iBAAS;UAChDA,8BAAsB;UAAAA,YAAc;UAAAA,iBAAM;;;UALlCA,eAAwB;UAAxBA,wCAAwB;UACPA,eAAe;UAAfA,0CAAe;UAE9BA,eAAoB;UAApBA,oCAAoB;UAERA,eAAc;UAAdA,kCAAc","names":["i0","ChatGptComponent","constructor","http","ngOnInit","enviarPrompt","prompt","post","apiUrl","ai","selectedAI","withCredentials","subscribe","next","res","resposta","error","err","console","selectors","decls","vars","consts","template","ctx"],"sourceRoot":"","sources":["/Users/marcato/Local_Juliano/PO/po-chatgpt/frontend/src/app/chat-gpt/chat-gpt.component.html","/Users/marcato/Local_Juliano/PO/po-chatgpt/frontend/src/app/chat-gpt/chat-gpt.component.ts"],"sourcesContent":["<div class=\"chat-container\">\n  <h2>Chat GPT</h2>\n  <select [(ngModel)]=\"selectedAI\">\n    <option *ngFor=\"let ai of availableAIs\" [value]=\"ai\">{{ ai }}</option>\n  </select>\n  <textarea [(ngModel)]=\"prompt\" placeholder=\"Digite sua pergunta\"></textarea>\n  <button (click)=\"enviarPrompt()\">Enviar</button>\n  <div class=\"resposta\">{{ resposta }}</div>\n</div>\n","// src/app/chat-gpt/chat-gpt.component.ts\nimport { Component, OnInit } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\n\n@Component({\n  selector: 'app-chat-gpt',\n  templateUrl: './chat-gpt.component.html',\n  styleUrls: ['./chat-gpt.component.css']\n})\nexport class ChatGptComponent implements OnInit {\n  prompt: string = '';\n  resposta: string = '';\n  selectedAI: string = 'gpt';\n  availableAIs: string[] = ['gpt', 'deepseek', 'gemini'];\n  private apiUrl = 'http://localhost:3000/api';\n\n  constructor(private http: HttpClient) {}\n\n  ngOnInit(): void {}\n\n  enviarPrompt(): void {\n    if (!this.prompt) return;\n    this.http.post(`${this.apiUrl}/prompt`, { prompt: this.prompt, ai: this.selectedAI }, { withCredentials: true })\n      .subscribe({\n        next: (res: any) => this.resposta = res.resposta,\n        error: err => console.error('Erro ao enviar prompt', err)\n      });\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}