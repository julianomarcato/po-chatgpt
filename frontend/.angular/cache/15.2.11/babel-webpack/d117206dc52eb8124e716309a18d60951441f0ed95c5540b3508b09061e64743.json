{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"./chat-gpt.service\";\nimport * as i2 from \"@angular/common\";\nimport * as i3 from \"@angular/forms\";\nfunction ChatGptComponent_option_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"option\", 5);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ai_r2 = ctx.$implicit;\n    i0.ɵɵproperty(\"value\", ai_r2);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate(ai_r2);\n  }\n}\nfunction ChatGptComponent_div_5_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\")(1, \"h3\");\n    i0.ɵɵtext(2, \"Resposta:\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(3, \"p\");\n    i0.ɵɵtext(4);\n    i0.ɵɵelementEnd()();\n  }\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(4);\n    i0.ɵɵtextInterpolate(ctx_r1.resposta);\n  }\n}\nexport let ChatGptComponent = /*#__PURE__*/(() => {\n  class ChatGptComponent {\n    constructor(chatService) {\n      this.chatService = chatService;\n      this.prompt = '';\n      this.resposta = '';\n      this.selectedAI = 'GPT'; // AI padrão\n      this.availableAIs = ['GPT', 'DeepSeek', 'Gemini'];\n    }\n    ngOnInit() {\n      // Aqui você pode carregar configs iniciais se precisar\n    }\n    enviarPrompt() {\n      if (!this.prompt) return;\n      this.chatService.sendPrompt(this.prompt, this.selectedAI).subscribe({\n        next: res => {\n          this.resposta = res.resposta;\n        },\n        error: err => console.error('Erro ao enviar prompt', err)\n      });\n    }\n    static {\n      this.ɵfac = function ChatGptComponent_Factory(t) {\n        return new (t || ChatGptComponent)(i0.ɵɵdirectiveInject(i1.ChatGptService));\n      };\n    }\n    static {\n      this.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n        type: ChatGptComponent,\n        selectors: [[\"app-chat-gpt\"]],\n        decls: 6,\n        vars: 4,\n        consts: [[3, \"ngModel\", \"ngModelChange\"], [3, \"value\", 4, \"ngFor\", \"ngForOf\"], [\"placeholder\", \"Digite sua pergunta\", 3, \"ngModel\", \"ngModelChange\"], [3, \"click\"], [4, \"ngIf\"], [3, \"value\"]],\n        template: function ChatGptComponent_Template(rf, ctx) {\n          if (rf & 1) {\n            i0.ɵɵelementStart(0, \"select\", 0);\n            i0.ɵɵlistener(\"ngModelChange\", function ChatGptComponent_Template_select_ngModelChange_0_listener($event) {\n              return ctx.selectedAI = $event;\n            });\n            i0.ɵɵtemplate(1, ChatGptComponent_option_1_Template, 2, 2, \"option\", 1);\n            i0.ɵɵelementEnd();\n            i0.ɵɵelementStart(2, \"textarea\", 2);\n            i0.ɵɵlistener(\"ngModelChange\", function ChatGptComponent_Template_textarea_ngModelChange_2_listener($event) {\n              return ctx.prompt = $event;\n            });\n            i0.ɵɵelementEnd();\n            i0.ɵɵelementStart(3, \"button\", 3);\n            i0.ɵɵlistener(\"click\", function ChatGptComponent_Template_button_click_3_listener() {\n              return ctx.enviarPrompt();\n            });\n            i0.ɵɵtext(4, \"Enviar\");\n            i0.ɵɵelementEnd();\n            i0.ɵɵtemplate(5, ChatGptComponent_div_5_Template, 5, 1, \"div\", 4);\n          }\n          if (rf & 2) {\n            i0.ɵɵproperty(\"ngModel\", ctx.selectedAI);\n            i0.ɵɵadvance(1);\n            i0.ɵɵproperty(\"ngForOf\", ctx.availableAIs);\n            i0.ɵɵadvance(1);\n            i0.ɵɵproperty(\"ngModel\", ctx.prompt);\n            i0.ɵɵadvance(3);\n            i0.ɵɵproperty(\"ngIf\", ctx.resposta);\n          }\n        },\n        dependencies: [i2.NgForOf, i2.NgIf, i3.NgSelectOption, i3.ɵNgSelectMultipleOption, i3.DefaultValueAccessor, i3.SelectControlValueAccessor, i3.NgControlStatus, i3.NgModel]\n      });\n    }\n  }\n  return ChatGptComponent;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}