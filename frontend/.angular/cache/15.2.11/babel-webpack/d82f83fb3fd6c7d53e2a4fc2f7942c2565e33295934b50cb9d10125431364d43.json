{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"../auth.service\";\nimport * as i2 from \"@angular/router\";\nimport * as i3 from \"@angular/common/http\";\nexport class DashboardComponent {\n  constructor(authService, router, http) {\n    this.authService = authService;\n    this.router = router;\n    this.http = http;\n    this.ais = [];\n    this.prompt = '';\n    this.selectedAI = 'gpt';\n    this.response = '';\n    this.loading = false;\n  }\n  ngOnInit() {\n    if (!this.authService.isAuthenticated()) {\n      this.router.navigate(['/login']);\n    }\n    this.loadUserInfo();\n    this.loadAIs();\n  }\n  loadUserInfo() {\n    this.http.get('http://localhost:3000/api/user', {\n      withCredentials: true\n    }).subscribe({\n      next: response => {\n        this.user = response.user;\n      },\n      error: () => {\n        this.authService.logout();\n      }\n    });\n  }\n  loadAIs() {\n    this.http.get('http://localhost:3000/api/ais', {\n      withCredentials: true\n    }).subscribe({\n      next: response => {\n        this.ais = response.ais;\n      },\n      error: error => {\n        console.error('Error loading AIs:', error);\n      }\n    });\n  }\n  sendPrompt() {\n    if (!this.prompt.trim()) return;\n    this.loading = true;\n    this.response = '';\n    this.http.post('http://localhost:3000/api/prompt', {\n      prompt: this.prompt,\n      ai: this.selectedAI\n    }, {\n      withCredentials: true\n    }).subscribe({\n      next: response => {\n        this.response = response.resposta;\n        this.loading = false;\n      },\n      error: error => {\n        console.error('Error:', error);\n        this.response = 'Erro ao processar a solicitação';\n        this.loading = false;\n      }\n    });\n  }\n  logout() {\n    this.authService.logout();\n  }\n  static {\n    this.ɵfac = function DashboardComponent_Factory(t) {\n      return new (t || DashboardComponent)(i0.ɵɵdirectiveInject(i1.AuthService), i0.ɵɵdirectiveInject(i2.Router), i0.ɵɵdirectiveInject(i3.HttpClient));\n    };\n  }\n  static {\n    this.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n      type: DashboardComponent,\n      selectors: [[\"app-dashboard\"]],\n      decls: 2,\n      vars: 0,\n      template: function DashboardComponent_Template(rf, ctx) {\n        if (rf & 1) {\n          i0.ɵɵelementStart(0, \"p\");\n          i0.ɵɵtext(1, \"dashboard works!\");\n          i0.ɵɵelementEnd();\n        }\n      },\n      styles: [\"\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZVJvb3QiOiIifQ== */\"]\n    });\n  }\n}","map":{"version":3,"mappings":";;;;AAWA,OAAM,MAAOA,kBAAkB;EAQ7BC,YACUC,WAAwB,EACxBC,MAAc,EACdC,IAAgB;IAFhB,gBAAW,GAAXF,WAAW;IACX,WAAM,GAANC,MAAM;IACN,SAAI,GAAJC,IAAI;IATd,QAAG,GAAU,EAAE;IACf,WAAM,GAAW,EAAE;IACnB,eAAU,GAAW,KAAK;IAC1B,aAAQ,GAAW,EAAE;IACrB,YAAO,GAAY,KAAK;EAMrB;EAEHC,QAAQ;IACN,IAAI,CAAC,IAAI,CAACH,WAAW,CAACI,eAAe,EAAE,EAAE;MACvC,IAAI,CAACH,MAAM,CAACI,QAAQ,CAAC,CAAC,QAAQ,CAAC,CAAC;;IAGlC,IAAI,CAACC,YAAY,EAAE;IACnB,IAAI,CAACC,OAAO,EAAE;EAChB;EAEAD,YAAY;IACV,IAAI,CAACJ,IAAI,CAACM,GAAG,CAAM,gCAAgC,EACjD;MAAEC,eAAe,EAAE;IAAI,CAAE,CAC1B,CAACC,SAAS,CAAC;MACVC,IAAI,EAAGC,QAAQ,IAAI;QACjB,IAAI,CAACC,IAAI,GAAGD,QAAQ,CAACC,IAAI;MAC3B,CAAC;MACDC,KAAK,EAAE,MAAK;QACV,IAAI,CAACd,WAAW,CAACe,MAAM,EAAE;MAC3B;KACD,CAAC;EACJ;EAEAR,OAAO;IACL,IAAI,CAACL,IAAI,CAACM,GAAG,CAAM,+BAA+B,EAChD;MAAEC,eAAe,EAAE;IAAI,CAAE,CAC1B,CAACC,SAAS,CAAC;MACVC,IAAI,EAAGC,QAAQ,IAAI;QACjB,IAAI,CAACI,GAAG,GAAGJ,QAAQ,CAACI,GAAG;MACzB,CAAC;MACDF,KAAK,EAAGA,KAAK,IAAI;QACfG,OAAO,CAACH,KAAK,CAAC,oBAAoB,EAAEA,KAAK,CAAC;MAC5C;KACD,CAAC;EACJ;EAEAI,UAAU;IACR,IAAI,CAAC,IAAI,CAACC,MAAM,CAACC,IAAI,EAAE,EAAE;IAEzB,IAAI,CAACC,OAAO,GAAG,IAAI;IACnB,IAAI,CAACT,QAAQ,GAAG,EAAE;IAElB,IAAI,CAACV,IAAI,CAACoB,IAAI,CAAM,kCAAkC,EACpD;MAAEH,MAAM,EAAE,IAAI,CAACA,MAAM;MAAEI,EAAE,EAAE,IAAI,CAACC;IAAU,CAAE,EAC5C;MAAEf,eAAe,EAAE;IAAI,CAAE,CAC1B,CAACC,SAAS,CAAC;MACVC,IAAI,EAAGC,QAAQ,IAAI;QACjB,IAAI,CAACA,QAAQ,GAAGA,QAAQ,CAACa,QAAQ;QACjC,IAAI,CAACJ,OAAO,GAAG,KAAK;MACtB,CAAC;MACDP,KAAK,EAAGA,KAAK,IAAI;QACfG,OAAO,CAACH,KAAK,CAAC,QAAQ,EAAEA,KAAK,CAAC;QAC9B,IAAI,CAACF,QAAQ,GAAG,iCAAiC;QACjD,IAAI,CAACS,OAAO,GAAG,KAAK;MACtB;KACD,CAAC;EACJ;EAEAN,MAAM;IACJ,IAAI,CAACf,WAAW,CAACe,MAAM,EAAE;EAC3B;;;uBAzEWjB,kBAAkB;IAAA;EAAA;;;YAAlBA,kBAAkB;MAAA4B;MAAAC;MAAAC;MAAAC;QAAA;UCX/BC,yBAAG;UAAAA,gCAAgB;UAAAA,iBAAI","names":["DashboardComponent","constructor","authService","router","http","ngOnInit","isAuthenticated","navigate","loadUserInfo","loadAIs","get","withCredentials","subscribe","next","response","user","error","logout","ais","console","sendPrompt","prompt","trim","loading","post","ai","selectedAI","resposta","selectors","decls","vars","template","i0"],"sourceRoot":"","sources":["/Users/marcato/Local_Juliano/PO/po-chatgpt/frontend/src/app/dashboard/dashboard.component.ts","/Users/marcato/Local_Juliano/PO/po-chatgpt/frontend/src/app/dashboard/dashboard.component.html"],"sourcesContent":["// dashboard.component.ts - COMPLETO\nimport { Component, OnInit } from '@angular/core';\nimport { AuthService } from '../auth.service';\nimport { Router } from '@angular/router';\nimport { HttpClient } from '@angular/common/http';\n\n@Component({\n  selector: 'app-dashboard',\n  templateUrl: './dashboard.component.html',\n  styleUrls: ['./dashboard.component.css']\n})\nexport class DashboardComponent implements OnInit {\n  user: any;\n  ais: any[] = [];\n  prompt: string = '';\n  selectedAI: string = 'gpt';\n  response: string = '';\n  loading: boolean = false;\n\n  constructor(\n    private authService: AuthService,\n    private router: Router,\n    private http: HttpClient\n  ) {}\n\n  ngOnInit() {\n    if (!this.authService.isAuthenticated()) {\n      this.router.navigate(['/login']);\n    }\n    \n    this.loadUserInfo();\n    this.loadAIs();\n  }\n\n  loadUserInfo() {\n    this.http.get<any>('http://localhost:3000/api/user', \n      { withCredentials: true }\n    ).subscribe({\n      next: (response) => {\n        this.user = response.user;\n      },\n      error: () => {\n        this.authService.logout();\n      }\n    });\n  }\n\n  loadAIs() {\n    this.http.get<any>('http://localhost:3000/api/ais',\n      { withCredentials: true }\n    ).subscribe({\n      next: (response) => {\n        this.ais = response.ais;\n      },\n      error: (error) => {\n        console.error('Error loading AIs:', error);\n      }\n    });\n  }\n\n  sendPrompt() {\n    if (!this.prompt.trim()) return;\n\n    this.loading = true;\n    this.response = '';\n\n    this.http.post<any>('http://localhost:3000/api/prompt',\n      { prompt: this.prompt, ai: this.selectedAI },\n      { withCredentials: true }\n    ).subscribe({\n      next: (response) => {\n        this.response = response.resposta;\n        this.loading = false;\n      },\n      error: (error) => {\n        console.error('Error:', error);\n        this.response = 'Erro ao processar a solicitação';\n        this.loading = false;\n      }\n    });\n  }\n\n  logout() {\n    this.authService.logout();\n  }\n}","<p>dashboard works!</p>\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}