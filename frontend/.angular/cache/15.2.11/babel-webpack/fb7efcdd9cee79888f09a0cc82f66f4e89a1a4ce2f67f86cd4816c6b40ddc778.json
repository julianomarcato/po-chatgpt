{"ast":null,"code":"import { tap } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class AuthService {\n  constructor(http) {\n    this.http = http;\n    this.user = null;\n  }\n  checkAuth() {\n    return this.http.get('/api/user', {\n      withCredentials: true\n    }).pipe(tap(res => this.user = res));\n  }\n  isAuthenticated() {\n    return !!this.user?.authenticated;\n  }\n  getUser() {\n    return this.user?.user;\n  }\n  setUser(user) {\n    this.user = {\n      authenticated: true,\n      user\n    };\n  }\n  static {\n    this.ɵfac = function AuthService_Factory(t) {\n      return new (t || AuthService)(i0.ɵɵinject(i1.HttpClient));\n    };\n  }\n  static {\n    this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: AuthService,\n      factory: AuthService.ɵfac,\n      providedIn: 'root'\n    });\n  }\n}","map":{"version":3,"mappings":"AAEA,SAAqBA,GAAG,QAAQ,MAAM;;;AAGtC,OAAM,MAAOC,WAAW;EAGtBC,YAAoBC,IAAgB;IAAhB,SAAI,GAAJA,IAAI;IAFhB,SAAI,GAAQ,IAAI;EAEe;EAEvCC,SAAS;IACP,OAAO,IAAI,CAACD,IAAI,CAACE,GAAG,CAAC,WAAW,EAAE;MAAEC,eAAe,EAAE;IAAI,CAAE,CAAC,CAACC,IAAI,CAC/DP,GAAG,CAACQ,GAAG,IAAI,IAAI,CAACC,IAAI,GAAGD,GAAG,CAAC,CAC5B;EACH;EAEAE,eAAe;IACb,OAAO,CAAC,CAAC,IAAI,CAACD,IAAI,EAAEE,aAAa;EACnC;EAEAC,OAAO;IACL,OAAO,IAAI,CAACH,IAAI,EAAEA,IAAI;EACxB;EAEAI,OAAO,CAACJ,IAAS;IACf,IAAI,CAACA,IAAI,GAAG;MAAEE,aAAa,EAAE,IAAI;MAAEF;IAAI,CAAE;EAC3C;;;uBArBWR,WAAW;IAAA;EAAA;;;aAAXA,WAAW;MAAAa,SAAXb,WAAW;MAAAc,YADE;IAAM;EAAA","names":["tap","AuthService","constructor","http","checkAuth","get","withCredentials","pipe","res","user","isAuthenticated","authenticated","getUser","setUser","factory","providedIn"],"sourceRoot":"","sources":["/Users/marcato/Local_Juliano/PO/po-chatgpt/frontend/src/app/auth.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { Observable, tap } from 'rxjs';\n\n@Injectable({ providedIn: 'root' })\nexport class AuthService {\n  private user: any = null;\n\n  constructor(private http: HttpClient) {}\n\n  checkAuth(): Observable<any> {\n    return this.http.get('/api/user', { withCredentials: true }).pipe(\n      tap(res => this.user = res)\n    );\n  }\n\n  isAuthenticated(): boolean {\n    return !!this.user?.authenticated;\n  }\n\n  getUser() {\n    return this.user?.user;\n  }\n\n  setUser(user: any) {\n    this.user = { authenticated: true, user };\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}